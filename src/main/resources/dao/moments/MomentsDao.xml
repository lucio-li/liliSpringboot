<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lili.dao.moments.MomentsDao">
    <resultMap id="BaseResultMap" type="com.lili.entity.vo.MomentsVo">
        <result column="id" jdbcType="VARCHAR" property="id" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="location" jdbcType="VARCHAR" property="location" />
        <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
        <result column="headImg" jdbcType="VARCHAR" property="headImg" />
        <collection property="commentsList" ofType="com.lili.entity.moments.Comments">
            <result column="commentsId" jdbcType="VARCHAR" property="id"/>
            <result column="contentDetail" jdbcType="VARCHAR" property="contentDetail"/>
            <result column="commentCreator" jdbcType="VARCHAR" property="creator"/>
            <result column="aimUser" jdbcType="VARCHAR" property="aimUser"/>
        </collection>
        <collection property="attachmentList" ofType="String" column="attachmentId">
            <result column="attachmentId" jdbcType="VARCHAR" />
        </collection>

    </resultMap>

    <select id="queryAll"  resultMap="BaseResultMap">
        select moments.id, moments.content, moments.location, moments.creator,moments.create_time as createTime,
        user.headImg, comments.id as commentsId, comments.content as contentDetail,comments.creator as commentCreator,
        comments.aim_user as aimUser, attachment.id as attachmentId
        from
        moments left join comments
        ON moments.id = comments.moments_id and comments.status = 1
        left join attachment on attachment.moments_id = moments.id and  attachment.status = 1
        left join user on user.openid = moments.creator
        where moments.status = 1
        order by moments.create_time desc,
        attachment.create_time asc
    </select>



    <select id="queryOne" parameterType="string" resultMap="BaseResultMap">
        select * from moments where openid=#{openid}
    </select>
    <insert id="insertOne" parameterType="com.lili.entity.moments.Moments">
        insert into moments(id, create_time, content, location, creator, update_time, status, update_user)
        values(#{id}, NOW(), #{content}, #{location},  #{creator}, NOW(), 1, #{creator})
    </insert>
    <delete id="deleteOne" parameterType="java.lang.String">
        DELETE FROM moments WHERE time = #{time}
    </delete>
</mapper>