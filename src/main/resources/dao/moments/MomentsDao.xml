<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lili.dao.moments.MomentsDao">
    <resultMap id="BaseResultMap" type="com.lili.entity.vo.MomentsVo">
        <result column="id" jdbcType="VARCHAR" property="id"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="location" jdbcType="VARCHAR" property="location"/>
        <result column="createTime" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="headImg" jdbcType="VARCHAR" property="headImg"/>
        <collection property="commentsList" ofType="com.lili.entity.vo.CommentsVo">
            <result column="commentsId" jdbcType="VARCHAR" property="id"/>
            <result column="contentDetail" jdbcType="VARCHAR" property="contentDetail"/>
            <result column="commentCreator" jdbcType="VARCHAR" property="creator"/>
            <result column="aimUser" jdbcType="VARCHAR" property="aimUser"/>
        </collection>
        <collection property="attachmentList" ofType="String" column="attachmentId">
            <result column="attachmentId" jdbcType="VARCHAR"/>
        </collection>

    </resultMap>

    <select id="queryAll" resultMap="BaseResultMap" parameterType="com.lili.core.PageForm">
        SELECT momentTmp.id,momentTmp.content,momentTmp.location,momentTmp.creator,
	    momentTmp.create_time AS createTime,
	    user .headImg, comments.id AS commentsId,comments.content AS contentDetail,
	    userComment.name AS commentCreator,comments.aim_user AS aimUser,
	    attachment.id AS attachmentId
        FROM
            (select * from moments where moments.STATUS = 1  ORDER BY
            moments.create_time DESC limit #{currentPage} ,#{pageSize}) momentTmp
        LEFT JOIN comments ON momentTmp.id = comments.moments_id
        AND comments. STATUS = 1
        left JOIN user userComment on  userComment.openid = comments.creator
        LEFT JOIN attachment ON attachment.moments_id = momentTmp.id
        AND attachment. STATUS = 1
        LEFT JOIN user ON user .openid = momentTmp.creator
	    ORDER BY momentTmp.create_time DESC, comments.create_time ASC, attachment.create_time ASC

    </select>


    <select id="queryOne" parameterType="string" resultMap="BaseResultMap">
        select * from moments where openid=#{openid}
    </select>
    <insert id="insertOne" parameterType="com.lili.entity.moments.Moments">
        insert into moments(id, create_time, content, location, creator, update_time, status, update_user)
        values(#{id}, NOW(), #{content}, #{location},  #{creator}, NOW(), 1, #{creator})
    </insert>
    <delete id="deleteOne" parameterType="java.lang.String">
        UPDATE moments SET status = 0 where id = #{id}
    </delete>
    <select id="selectCount" resultType="int">
        select count(id) from moments
    </select>
</mapper>